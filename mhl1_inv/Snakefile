## mhl1_inv/Snakefile: pipeline to test if outlier overlapping mhl1 QTL is an inversion

workdir: path_hilo
# note: working directory is hilo/ and all file inputs/outputs below are relative to that working directory


## get_mhl1_inv_coord: gets coordinates for putative mhl1 inversion by finding tracts in sympatric maize with high slope with elevation that are in bin 4 chr9 (mhl1 QTL)
# note: merges regions within 10kb into 1 contiguous region and takes largest region only for .regions file
rule get_mhl1_inv_coord:
    input:
        outliers_bed = "ZAnc/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/maize_pos_lmElev_outliers.fdr05.bed",
        mhl1_bed = "data/known_QTL/chr9_bin4_mhl1_locus_v4.bed",
        genome = ref_chr
    output:
        bed = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.bed",
        regions_file = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.regions"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 5,
        mem = 2
    shell:
        """
        bedtools intersect -a {input.outliers_bed} -b {input.mhl1_bed} -sorted -g {input.genome} | bedtools merge -i - -d 10000 > {output.bed}
        cat {output.bed} | awk -v max=0 '{{if($3-$2>max){{max=$3-$2; line=$1"\:"$2"-"$3}}}}END{{print line}}' > {output.regions_file}
        """
    #bedtools intersect -a ZAnc/results/HILO_MAIZE55/Ne10000_yesBoot/maize_pos_lmElev_outliers.fdr05.bed
    #-b data/known_QTL/chr9_bin4_mhl1_locus_v4.bed -sorted -g data/refMaize/Zea_mays.AFPv4.dna.chr.autosome.lengths | bedtools merge -i -

## get_GL_mhl1_inv: get genotype likelihoods for all SNPs maf > .05 (maize + mexicana) for mhl1 putative inversion region
rule get_GL_mhl1_inv:
    input:
        bams = lambda wildcards: get_all_bams(wildcards.PREFIX), # all input bams
        bais = lambda wildcards: get_all_bais(wildcards.PREFIX), # all input bam indexes
        bam_list = "samples/{PREFIX}_bams.list",
        ref = ref,
        fai = fai,
        depth = "variant_sites/results/depthCov/N1000.L100.regions/{PREFIX}.Q20.depthGlobal",
        regions_file = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.regions"
    output: # outputs minor allele freq. file and beagle GL file
        mafs = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.mafs.gz",
        gl = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.beagle.gz"
    params:
        p = "med2",
        out_prefix = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv",
        min_ind = 150, # a little less than 40% of the total sample (including ind's < 0.5x coverage that won't get ancestry calls)
        # calculate 2.5x the mean depth
        max_depth = lambda wildcards, input: int(np.average(np.array(open(input.depth).readline().strip().split("\t")).astype(np.int)*range(10001)*2.5))
    shadow:
        "minimal"
    threads:
        2
    resources:
        time_min = lambda wildcards, attempt: attempt * 6 * 60,
        mem = lambda wildcards, attempt: attempt * 16
    shell:
        "angsd -out {params.out_prefix} "
        "-rf {input.regions_file} "
        "-ref {input.ref} "
        "-bam {input.bam_list} "
        "-remove_bads 1 "
        "-minMapQ 30 -minQ 20 "
        "-doMajorMinor 2 "
        "-doCounts 1 -minMaf 0.05 -doMaf 8 "
        "-GL 1 -doGlf 2 "
        "-minInd {params.min_ind} "
        "-P 2 "
        "-baq 2 "
        "-setMaxDepth {params.max_depth} "
        "-checkBamHeaders 0"


## run_PCAngsd_mhl1_inv: run pcangsd on maize + mexicana individuals for mhl1 putative inversion region
rule run_PCAngsd_mhl1_inv:
    input:
        gl = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.beagle.gz"
    output:
        cov = "mhl1_inv/results/PCA/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.cov"
    params:
        p = "med2",
        prefix_out = lambda wildcards, output: os.path.splitext(output.cov)[0] # output file without .cov extension
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        4
    resources:
        time_min = lambda wildcards, attempt: attempt * 6 * 60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        """
        pcangsd \
        -beagle {input.gl} \
        -threads {threads} -iter 100 \
        -minMaf 0 -admix \
        -o {params.prefix_out}
        """

## plot_mhl1_inv: plot ancestry outliers across chr9 bin 4
rule plot_mhl1_inv:
    input:
        colors = "colors.R",
        fdr_maize = "ZAnc/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/maize.lmElev.fdr.RData",
        meta_maize = "local_ancestry/results/ancestry_hmm/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/anc/maize.pop.meta.RData",
        meta_ind = "samples/{PREFIX}_meta.RData",
        fit_maize = "ZAnc/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/maize.lmElev.fit.RData",
        sites = "local_ancestry/results/thinnedSNPs/{PREFIX}/K{K}/whole_genome.var.sites",
        mhl1_QTL_bed = "data/known_QTL/chr9_bin4_mhl1_locus_v4.bed",
        mhl1_inv_bed = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.bed"
    output:
        png = "mhl1_inv/plots/{PREFIX}_K{K}_Ne{Ne}_{YESNO}Boot_mhl1_inv_ancestry.png",
        png_lzw = "../hilo_manuscript/figures_supp/{PREFIX}_K{K}_Ne{Ne}_{YESNO}Boot_mhl1_inv_ancestry.tif"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 4
    script:
        "plot_mhl1_inv.R"

## plot_mhl1_inv_PCAngsd: plot PCA for putative mhl1 inversion
rule plot_mhl1_inv_PCAngsd:
    input:
        meta = "samples/{PREFIX}_meta.RData",
        colors = "colors.R",
        cov = "mhl1_inv/results/PCA/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.cov"
    output:
        png_pca = "mhl1_inv/plots/{PREFIX}_K{K}_Ne{Ne}_{YESNO}Boot_mhl1_inv_pca.png",
        png_pca_lzw = "../hilo_manuscript/figures_supp/{PREFIX}_K{K}_Ne{Ne}_{YESNO}Boot_mhl1_inv_pca.tif"
    params:
        p = "med2"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "plot_mhl1_inv_PCAngsd.R"

## get_sample_list_mhl1_inv: splits samples by inversion allele (homozygous maize/parv or mexicana) and the inversion
rule get_sample_list_mhl1_inv:
    input:
        meta = "samples/{PREFIX}_meta.RData",
        cov = "mhl1_inv/results/PCA/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mhl1_inv.cov"
    output:
        maize2_parv = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/maize_cluster_parv_samples.list",
        maize2_maize = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/maize_cluster_maize_samples.list",
        mexicana2_maize = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mexicana_cluster_maize_samples.list",
        mexicana2_mexicana = "mhl1_inv/results/{PREFIX}/K{K}/Ne{Ne}_{YESNO}Boot/mexicana_cluster_mexicana_samples.list"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 4
    script:
        "get_sample_list_mhl1_inv.R"
#- need list of samples for parv, maize (ref or symp) with homozygous for maize allele at the inversion
#- as well as list of samples from mexicana and maize (ref or symp grouped together) homozygous for mexicana allele at the inversion
#- defined by the PCA
#- then use angsd to calculate
