## ZAnc/Snakefile: pipeline to call ancestry outliers

workdir: path_hilo
# note: working directory is hilo/ and all file inputs/outputs below are relative to that working directory

## calc_K_matrix_zea: calculate K matrix
rule calc_K_matrix_zea:
    input:
        pop_anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pops.anc.RData",
        k_functions = "ZAnc/k_matrix.R"
    output:
        K = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.K.RData"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = lambda wildcards, attempt: attempt * 15,
        mem = lambda wildcards, attempt: attempt * 2
    script:
        "calc_K_matrix_zea.R"

## simulate_MVN: simulate ancestry data based on a multi-variate normal model of ancestry drift
rule simulate_MVN:
    input:
        K = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.K.RData",
        meta_pop = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pop.meta.RData"
    output:
        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.MVN.RData"
    params:
        p = "med2",
        n_sim = 100000
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 5,
        mem = lambda wildcards, attempt: attempt * 2
    script:
        "simulate_MVN.R"

## fit_lm_elev: fits simple linear model lm(anc ~ elev)
rule fit_lm_elev:
    input:
        fdr_functions = "ZAnc/FDR.R",
        lm_functions = "ZAnc/lm_env_function.R",
        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.MVN.RData",
        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pops.anc.RData",
        meta_pop = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pop.meta.RData"
    output:
        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.fdr.RData",
        fit = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.fit.RData",
        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.sim.RData" # fits from simulated MVN data
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 2*60,
        mem = 2
    script:
        "fit_lm_elev.R"

## calc_fdr_mean_anc: calculates false discovery rates for mean ancestry based on MVN simulations
rule calc_fdr_mean_anc:
    input:
        fdr_functions = "ZAnc/FDR.R",
        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.MVN.RData",
        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pops.anc.RData"
    output:
        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.meanAnc.fdr.RData"
    params:
        p = "med2",
        zea = lambda wildcards: wildcards.ZEA
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 2
    script:
        "calc_fdr_mean_anc.R"

## plot_mean_anc: plots mean ancestry across all samples and outlier regions
rule plot_mean_anc:
    input:
        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pops.anc.RData",
        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.meanAnc.fdr.RData",
        meta_pop = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pop.meta.RData",
        colors = "colors.R",
        sites = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.var.sites",
        genome = ref_chr,
        centromeres = "data/refMaize/centromere_positions_v4.txt"
    output:
        png = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/{ZEA}_mean_anc.png",
        rds = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/{ZEA}.meanAnc.plot.rds" # ggplot object
    params:
        p = "med2",
        zea = lambda wildcards: wildcards.ZEA
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 2
    script:
        "plot_mean_anc.R"

## plot_slope_elev: plots lm results, slope with elevation, with outlier regions
rule plot_slope_elev:
    input:
        meta_pop = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pop.meta.RData",
        colors = "colors.R",
        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.fdr.RData",
        fit = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.fit.RData",
        sites = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.var.sites",
        genome = ref_chr,
        centromeres = "data/refMaize/centromere_positions_v4.txt"
    output:
        png = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/{ZEA}_slope_elev.png",
        rds = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.plot.rds" # ggplot object
    params:
        p = "med2",
        zea = lambda wildcards: wildcards.ZEA
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 2
    script:
        "plot_slope_elev.R"

## combine_genome_scan_plots: plots maize/mex mean ancestry and slope with elevation outliers plots across the genome in one figure
rule combine_genome_scan_plots:
    input:
        rds_maize_mean = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/maize.meanAnc.plot.rds",
        rds_mexicana_mean = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/mexicana.meanAnc.plot.rds",
        rds_maize_elev = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/maize.lmElev.plot.rds",
        rds_mexicana_elev = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/mexicana.lmElev.plot.rds"
    output:
        png = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/multi_maize_mexicana_genome_scan.png"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 2
    script:
        "combine_genome_scan_plots.R"

## plot_QQ: make QQ plots for mean ancestry and slope anc ~ elev (quantiles in MVN simulations vs data)
rule plotQQ:
    input: # all summarized simulation and observed results
        expand("local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/anc/{zea}.pops.anc.RData", zea = zea),
        expand("ZAnc/results/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/{zea}.MVN.RData", zea = zea),
        expand("ZAnc/results/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/{zea}.lmElev.fit.RData", zea = zea),
        expand("ZAnc/results/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/{zea}.lmElev.sim.RData", zea = zea)
    output:
        png = "ZAnc/plots/Ne{Ne}_{YESNO}Boot/QQ.png"
    params:
        p = "med2",
        Ne = lambda wildcards: wildcards.Ne,
        yesno = lambda wildcards: wildcards.YESNO
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 2
    script:
        "plot_QQ.R"

## make_bed_slope_elev: makes bed files with outlier regions for ancestry slope with elevation
rule make_bed_slope_elev:
    input:
        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.fdr.RData",
        fit = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.fit.RData",
        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.lmElev.sim.RData",
        bed = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.bed"
    output:
        pos_fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_pos_lmElev_outliers.fdr05.bed",
        neg_fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_neg_lmElev_outliers.fdr05.bed",
        pos_perc = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_pos_lmElev_outliers.perc02.bed",
        neg_perc = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_neg_lmElev_outliers.perc02.bed",
        pos_p = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_pos_lmElev_outliers.p05.bed",
        neg_p = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_neg_lmElev_outliers.p05.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "make_bed_slope_elev.R"

## make_bed_anc_outliers: makes bed files with outlier regions for mean mexicana ancestry (pos is above mean, neg is below mean)
rule make_bed_anc_outliers:
    input:
        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.meanAnc.fdr.RData",
        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.MVN.RData",
        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.combined.anc.bed"
    output:
        pos_fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_pos_meanAnc_outliers.fdr05.bed",
        neg_fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_neg_meanAnc_outliers.fdr05.bed",
        pos_perc = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_pos_meanAnc_outliers.perc02.bed",
        neg_perc = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_neg_meanAnc_outliers.perc02.bed",
        pos_p = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_pos_meanAnc_outliers.p05.bed",
        neg_p = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_neg_meanAnc_outliers.p05.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "make_bed_anc_outliers.R"

## merge_bed_outliers: merges adjacent outliers into contiguous regions
rule merge_bed_outliers:
    input:
        "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.bed"
    output:
        "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.merged.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 2,
        mem = 2
    shell:
        "bedtools merge -i {input} > {output}"

## find_flowering_time_genes_v4: for all flowering time genes on v2 coordinates, finds match on v4 coordinates. makes a bed file.
rule find_flowering_time_genes_v4:
    input:
        Li = "data/flowering_time/v2_unique_gene_names_Li_et_al_2016.csv",
        Dong = "data/flowering_time/floweringTimeMaizeDong2012.csv",
        cross_ref = "data/refMaize/geneAnnotations/gene_model_xref_v4_from_gramene.txt"
    output:
        bed = "ZAnc/results/flowering_time_genes_v4.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "flowering_time_genes.R"

## add_20kb_flowering_time_genes: adds 20kb upstream and downstream to all flowering time genes found on v4 chromosome coordinates
rule add_20kb_flowering_time_genes:
    input:
        bed = "ZAnc/results/flowering_time_genes_v4.bed",
        genome = ref_chr
    output:
        bed = "ZAnc/results/flowering_time_genes_v4.plus20kb.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    shell: # also gets rid of header
        "tail -n +2 {input.bed} | bedtools slop -i - -g {input.genome} -b 20000 > {output.bed}"

## calc_overlap: find overlap gene set & outliers. Also count number of outliers in original gene set (line 1) and 100 randomly shuffled positions from that gene set (lines 2-101)
rule calc_overlap:
    input:
        genes = "ZAnc/results/flowering_time_genes_v4.plus20kb.bed",
        outliers = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.merged.bed",
        genome = ref_chr
    output:
        bed = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.bed",
        shuffle = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.counts"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    shell:
        """
        bedtools intersect -a {input.genes} -b {input.outliers} > {output.bed}
        wc -l {output.bed} > {output.shuffle}
        for i in {{1..100}}
            do bedtools shuffle -i {input.genes} -g {input.genome} | \\
            bedtools intersect -a - -b {input.outliers} | wc -l >> {output.shuffle}
        done
        """

## plot_overlap_flowering_time: plot overlap gene set & outliers. Also count number of outliers in original gene set (line 1) and 100 randomly shuffled positions from that gene set (lines 2-101)
#rule plot_overlap_flowering_time:
#    input:
#        pos_fdr05 = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_pos_{STAT}_outliers.fdr05.counts",
#        neg_fdr05 = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_neg_{STAT}_outliers.fdr05.counts",
#        pos_p05 = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_pos_{STAT}_outliers.p05.counts",
#        neg_p05 = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_neg_{STAT}_outliers.p05.counts",
#        pos_perc02 = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_pos_{STAT}_outliers.perc02.counts",
#        neg_perc02 = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.{ZEA}_neg_{STAT}_outliers.perc02.counts"
#    output:
#        png = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/flowering_time_genes_v4.plus20kb.overlap.{ZEA}.{STAT}_outliers.png"
#    params:
#        p = "med2"
#    shadow:
#        "minimal"
#    conda:
#        "../envs/environment.yaml"
#    resources:
#        time_min = 15,
#        mem = 2
#    script:
#        "plot_overlap_flowering_time.R"

## test_key_genes: checks short list of key genes against outlier regions
rule test_key_genes:
    input:
        anc_maize = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/maize.pops.anc.RData",
        anc_fdr_maize = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/maize.meanAnc.fdr.RData",
        lmElev_maize = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/maize.lmElev.fit.RData",
        lmElev_fdr_maize = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/maize.lmElev.fdr.RData",
        meta_pop_maize = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/maize.pop.meta.RData",
        anc_mexicana = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/mexicana.pops.anc.RData",
        anc_fdr_mexicana = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/mexicana.meanAnc.fdr.RData",
        lmElev_mexicana = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/mexicana.lmElev.fit.RData",
        lmElev_fdr_mexicana = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/mexicana.lmElev.fdr.RData",
        meta_pop_mexicana = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/mexicana.pop.meta.RData",
        sites = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.var.sites",
        genome = ref_chr,
        genes_list = "data/key_genes.csv",
        bed_sites = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.bed"
    output:
        txt = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/genes_mapped_to_outliers.txt",
        tbl = "ZAnc/tables/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/genes_mapped_to_outliers.tex"
    params:
        p = "med2",
        Ne = lambda wildcards: wildcards.Ne,
        yesno = lambda wildcards: wildcards.YESNO,
        prefix = prefix_all
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 15,
        mem = 8
    script:
        "test_key_genes.R"

## fit_zAnc: zTz, lm(zAnc ~ zElev) and lm(zAnc ~ intercept) transforms ancestry using cholesky rotation, then fits association with transformed variables, or null model
#rule fit_zAnc:
#    input:
#        zAnc_functions = "ZAnc/other_functions.R",
#        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.MVN.RData",
#        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pops.anc.RData",
#        meta_pop = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.pop.meta.RData",
#        K = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.K.RData"
#    output:
#        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.zAnc.sim.RData",
#        fit = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.zAnc.fit.RData"
#    params:
#        p = "med2"
#    shadow:
#        "minimal"
#    conda:
#        "../envs/environment.yaml"
#    threads:
#        1
#    resources:
#        time_min = 3*60,
#        mem = 8
#    script:
#        "fit_zAnc_models.R"

## fdr_zAnc: calculates false discovery rates for zAnc models based on comparing enrichment for outliers in the data to the simulated MVN null model
#rule fdr_zAnc:
#    input:
#        sim = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.zAnc.sim.RData",
#        fit = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.zAnc.fit.RData",
#        fdr_functions = "ZAnc/FDR.R"
#    output:
#        fdr = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}.zAnc.fdr.RData"
#    params:
#        p = "med2"
#    shadow:
#        "minimal"
#    conda:
#        "../envs/environment.yaml"
#    threads:
#        1
#    resources:
#        time_min = 6*60,
#        mem = 8
#    script:
#        "fdr_zAnc_models.R"

## plot_shared_peaks: plots shared outlier peaks for high introgression
rule plot_shared_peaks:
    input:
        sim_maize = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/maize.MVN.RData",
        sim_mex = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/mexicana.MVN.RData",
        anc_maize = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/maize.pops.anc.RData",
        anc_mex = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/mexicana.pops.anc.RData",
        meta_pop_maize = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/maize.pop.meta.RData",
        meta_pop_mex = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/mexicana.pop.meta.RData",
        colors = "colors.R",
        sites = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.var.sites",
        inv = "data/refMaize/inversions/knownInv_v4_coord.txt",
        genome = "data/refMaize/Zea_mays.AFPv4.dna.chr.autosome.lengths"
    output:
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/mex_maize_hist_outlier_peaks.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/network_peak_sharing.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/network_peak_sharing_no_inv4m.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/network_peak_sharing_no_inv4m_data_only.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/network_peak_sharing_data_only.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/network_peak_sharing_sims_only.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/combmatrix_peak_sharing_maize.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/combmatrix_peak_sharing_mexicana.png",
        "ZAnc/plots/Ne{Ne}_{YESNO}Boot/shared_peaks_on_genome.png",
        expand("ZAnc/plots/Ne{{Ne}}_{{YESNO}}Boot/{zea}_shared_outliers_chr_{i}.png", i = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], zea = zea)
    params:
        p = "med2",
        Ne = lambda wildcards: wildcards.Ne,
        YESNO = lambda wildcards: wildcards.YESNO,
        prefix_all = prefix_all
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        1
    resources:
        time_min = 30,
        mem = 16
    script:
        "plot_shared_peaks.R"
