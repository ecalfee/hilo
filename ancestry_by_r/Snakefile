## ancestry_by_r/Snakefile: pipeline to get global ancestry estimates by recombination quintile (and bootstrap results)

workdir: path_hilo
# note: working directory is hilo/ and all file inputs/outputs below are relative to that working directory

## make_coding_bed: makes a bed file of coding regions ('CDS') from gff3 file. merges overlapping CDS and sorts results by genome order.
rule make_coding_bed:
    input:
        annotations = ref_anno,
        genome = ref_chr
    output:
        bed = "data/refMaize/geneAnnotations/Zea_mays.B73_RefGen_v4.41.chr.CDS.bed"
    params:
        p = "med2"
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
        time_min = 5,
        mem = 4
    shell:
        """
        grep -v '^#' {input.annotations} | awk -v OFS='\\t' '{{print $1,$4,$5,$3}}' |\\
        grep 'CDS' | grep -v '^Mt' | grep -v '^Pt' |\\
        bedtools sort -faidx {input.genome} -i stdin |\\
        bedtools merge -i stdin -c 4 -o distinct > {output}
        """

## define_1cM_windows: divides genome into 1cM windows
rule define_1cM_windows:
    input:
        rmap = rmap_ext,
        genome = ref_chr,
        cds = "data/refMaize/geneAnnotations/Zea_mays.B73_RefGen_v4.41.chr.CDS.bed"
    output:
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt"
    params:
        p = "med2"
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "define_1cM_windows_from_map.R" # define_bootstrap_windows_from_map.R

## sample_bootstrap_1cM: makes bootstrap (i.e. with replacement) samples of 1cM windows within recombination rate quintiles
rule sample_bootstrap_1cM:
    input:
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt"
    output: # FEATURE is recombination rate cM/Mb (r), coding bp/cM (cd), or frac coding bp (frac)
        expand("ancestry_by_r/results/bootstrap_1cM/{{PREFIX}}/{{FEATURE}}5_{r}/boot{BOOT}.list",
        r = [1, 2, 3, 4, 5], BOOT = list(range(0,101))) # 5 recombination rate quintiles, '0' for original sample and 1-100 bootstrap samples
    params:
        p = "med2",
        n = 100, # 100 bootstraps
        seed = 100, # random seed means same windows are chosen for bootstrap when re-run, e.g. for HILO_MAIZE55 and HILO_MAIZE55_PARV50
        prefix = lambda wildcards: wildcards.PREFIX,
        feature = lambda wildcards: wildcards.FEATURE
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "sample_windows_4_bootstrap.R"

## make_bed_files_for_windows: makes a separate bed file for each 1cM window
rule make_bed_file_for_windows:
    input:
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt"
    output:
        expand("ancestry_by_r/results/BED_1cM/{WINDOW}.bed", WINDOW = windows_1cM)
    params:
        p = "med2",
        prefix_all = prefix_all
    conda:
         "../envs/environment.yaml"
    resources:
        time_min = 5,
        mem = 2
    script:
        "make_bed_4_windows.R"

## find_SNPs_in_window: creates a GL file for each 1cM window using bedtools
# To accomplish this, I use an awk split file; first mapping the window label onto the GL line,
# then sending lines into each window-named file based on their 1cM window label
rule find_SNPs_in_window:
    input:
        gl = "global_ancestry/results/thinnedSNPs/{PREFIX}/whole_genome.beagle.gz",
        bed = "ancestry_by_r/results/BED_1cM/{WINDOW}.bed",
        genome = ref_chr
    output:
        "ancestry_by_r/results/GL_1cM/{PREFIX}/{WINDOW}.beagle.gz"
    params:
        p = "med2"
    conda:
         "../envs/environment.yaml"
    resources:
        time_min = lambda wildcards, attempt: attempt * 20,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        # get header and then append all the SNPs found within the window specified by the bed file
        "./ancestry_by_r/find_SNPs_in_window.sh {input.gl} {input.bed} {input.genome} {output}"

## make_bootstrap_GL_file: creates a new beagle GL file for a bootstrap sample by including SNPs within the sampled windows (with replacement)
rule make_bootstrap_GL_file:
    input:
        "global_ancestry/results/thinnedSNPs/{PREFIX}/whole_genome.beagle.gz",
        "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_{r}/boot{BOOT}.list",
        expand("ancestry_by_r/results/GL_1cM/{PREFIX}/{WINDOW}.beagle.gz", WINDOW = windows_1cM)
    output:
        "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_{r}/boot{BOOT}.beagle.gz"
    params:
        p = "med2",
        gl = lambda wildcards, input: input[0],
        sample = lambda wildcards, input: input[1]
    conda:
         "../envs/environment.yaml"
    resources:
        time_min = lambda wildcards, attempt: attempt * 20,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        "./ancestry_by_r/make_bootstrap_GL_file.sh {params.gl} {params.sample} {wildcards.PREFIX} {output}"

## run_bootstrap_NGSAdmix: runs NGSAdmix for a bootstrap sample
rule run_bootstrap_NGSAdmix:
    input:
        gl = "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_{r}/boot{BOOT}.beagle.gz"
    output:
        admix = "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_{r}/K{K}/boot{BOOT}.qopt"
    params:
        p = "med2",
        prefix_out = lambda wildcards, output: os.path.splitext(output.admix)[0] # output file without .qopt extension
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
        time_min = lambda wildcards, attempt: attempt * 30,
        mem = lambda wildcards, attempt: attempt * 4
    threads:
        1
    shell:
        """
        NGSadmix -likes {input.gl} \
        -K {wildcards.K} -P {threads} \
        -o {params.prefix_out}
        """

## label_k_anc: defines which of K ancestries is 'mexicana' based on allopatric reference panels
rule label_k_anc:
    input:
        admix = "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_{r}/K{K}/boot{BOOT}.qopt",
        meta = "samples/{PREFIX}_meta.RData"
    output:
        anc = "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_{r}/K{K}/boot{BOOT}.anc"
    params:
        p = "med2",
        k = lambda wildcards: wildcards.K
    conda:
         "../envs/environment.yaml"
    resources:
        time_min = 5,
        mem = 2
    script:
        "label_k_ancestries.R"

## summarise_bootstrap_anc_by_r: summarises bootstrap results for global ancestry by genomic quintiles
rule summarise_bootstrap_anc_by_r:
    input:
        "samples/{PREFIX}_meta.RData", # can't have only some named inputs; can use [[1]] to access in R
        "ancestry_by_r/results/map_pos_1cM_windows.txt",
        expand("ancestry_by_r/results/bootstrap_1cM/{{PREFIX}}/{{FEATURE}}5_{r}/K{{K}}/boot{BOOT}.anc",
        r = [1, 2, 3, 4, 5], BOOT = list(range(0, 101)))
    output:
        rdata = "ancestry_by_r/results/bootstrap_1cM/{PREFIX}/{FEATURE}5_K{K}.Rdata"
    params:
        p = "med2",
        k = lambda wildcards: wildcards.K,
        prefix = lambda wildcards: wildcards.PREFIX,
        feature = lambda wildcards: wildcards.FEATURE,
        meta = "samples/{PREFIX}_meta.RData",
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt",
        alpha = 0.05 # use 95% confidence intervals for bootstrap
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "summarise_bootstrap_NGSadmix.R"

## map_local_anc_onto_1cM_windows: maps local ancestry results onto 1cM genomic windows based on ancestry tracts bed file
rule map_local_anc_onto_1cM_windows:
    input:
        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{POP}.anc.freq",
        tracts = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.bed", # defines ancestry tracts
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt" # 1cM windows
    output:
        bed = "ancestry_by_r/results/local_anc_1cM/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{POP}.bed"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 10,
        mem = 2
    shell:
        """
        paste {input.tracts} {input.anc} | \\
        bedtools intersect -b {input.windows} -a stdin | \\
        bedtools sort | \\
        bedtools map -a stdin -b {input.windows} -c 4 -o distinct > {output.bed}
        """

## map_sites_onto_1cM_windows: maps sites onto 1cM windows
rule map_sites_onto_1cM_windows:
    input:
        tracts = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.bed", # defines ancestry tracts
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt" # 1cM windows
    output:
        bed = "ancestry_by_r/results/local_anc_1cM/" + prefix_all + "/ancestry_hmm_sites.bed"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 10,
        mem = 2
    shell:
        """
        awk {input.tracts} -v OFS='\\t' '{{print $1,$2-1,$2}}' | \\
        bedtools map -b {input.windows} -a stdin | \\
        bedtools sort > {output.bed}
        """

## summarise_local_anc_by_1cM: summarises mean local ancestry results by 1cM genomic windows
rule summarise_local_anc_by_1cM:
    input:
        bed = "ancestry_by_r/results/local_anc_1cM/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{POP}.bed",
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt" # 1cM windows
    output:
        summary = "ancestry_by_r/results/local_anc_1cM/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{POP}.anc.wind"
    params:
        p = "med2",
        pop = lambda wildcards: wildcards.POP
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 5,
        mem = 2
    script:
        "summarise_local_anc_by_1cM.R"

## input_abba_baba: creates input size and bam_list for running abba baba (f4) calcs
## where POP is the focal population
rule input_abba_baba:
    input:
        parv_bams = "samples/ALL_byPop/parv_bams.list",
        maize_bams = "samples/ALL_byPop/allopatric_maize_bams.list",
        x_bams = "samples/ALL_byPop/{POP}_bams.list",
        trip_bams = "samples/ALL_byPop/trip_bams.list"
    output:
        bam_list = "ancestry_by_r/results/f4/{POP}_bams.list",
        pops_size = "ancestry_by_r/results/f4/{POP}.size"
    params:
        p = "med2"
    resources:
        time_min = 1,
        mem = 1
    shell:
        """
        cat {input.trip_bams} {input.parv_bams} {input.x_bams} {input.maize_bams} > {output.bam_list}
        < {input.trip_bams} wc -l > {output.pops_size}
        < {input.parv_bams} wc -l >> {output.pops_size}
        < {input.x_bams} wc -l >> {output.pops_size}
        < {input.maize_bams} wc -l >> {output.pops_size}
        """

## get_region_from_bed(): helper function to extract region in format chr:start-end from a single region bed file
def get_region_from_bed(window):
    with open("ancestry_by_r/results/BED_1cM/" + window + ".bed") as f:
        line1 = f.readline()
        line2 = f.readline()
        row = line2.split("\t")
    return row[0] + ":" + row[1] + "-" + row[2]

## get_size_region_from_bed(): helper function to extract size of a region as an integer (# bp start-end) from a single region bed file
def get_size_region_from_bed(window):
    with open("ancestry_by_r/results/BED_1cM/" + window + ".bed") as f:
        line1 = f.readline()
        line2 = f.readline()
        row = line2.split("\t")
    return (int(row[2]) - int(row[1]))/1000000 # units Mbp

## do_abba_baba: runs angsd abba_baba2 to get f4 statistic for 1 genomic window
# output file has all possible population orders .. will later extract f4(trip, parv; x, maize)
rule do_abba_baba:
    input:
        bams = all_bams_parv_trip, # all input bams
        bais = [bam + ".bai" for bam in all_bams_parv_trip], # all input bam indexes
        bam_list = "ancestry_by_r/results/f4/{POP}_bams.list",
        bed_window = "ancestry_by_r/results/BED_1cM/{WINDOW}.bed",
        pops_size = "ancestry_by_r/results/f4/{POP}.size"
    output:
        abbababa = "ancestry_by_r/results/f4/{POP}/{WINDOW}.abbababa2",
        sample_depth = "ancestry_by_r/results/f4/{POP}/{WINDOW}.depthSample",
        global_depth = "ancestry_by_r/results/f4/{POP}/{WINDOW}.depthGlobal"
    params:
        p = "med2",
        out_prefix = "ancestry_by_r/results/f4/{POP}/{WINDOW}",
        region = lambda wildcards: get_region_from_bed(wildcards.WINDOW)
    shadow:
        "minimal"
    resources:
        time_min = lambda wildcards, attempt: 120 + int(get_size_region_from_bed(wildcards.WINDOW) * 3.5), # variable time based on genomic region size
        mem = lambda wildcards, attempt: [8, 16, 48][attempt - 1] # 8G, 16G or 48G
    shell:
        "angsd -out {params.out_prefix} "
        "-doAbbababa2 1 "
        "-r {params.region} "
        "-bam {input.bam_list} "
        "-sizeFile {input.pops_size} "
        "-remove_bads 1 -minMapQ 30 -minQ 20 "
        "-doCounts 1 -doDepth 1 "
        "-maxDepth 10000 "
        "-useLast 1 "
        "-blockSize 5000000 "
        "-checkBamHeaders 0"

# -doAbbababa2 options: -maxDepth=max depth of each site allowed (default 100)
# -sizeFile = file with sizes of the populations
# -doCounts 1 = make counts (required)
# -useLast 1 = use the last group of bam files as outgroup (tripsacum)
# -blockSize should exceed LD (important only for ANGSD built-in D calcs and confidence intervals), here I make it 5Mbp

## f4_from_abba_baba: extracts f4(trip, parv; x, allo_maize) from .abbababa2 output
# Each set of 3 lines represents one possible 4-pop tree. For the correct tree for f4-ratio estimates we take the
# 1st line and every 3rd line thereafter. (e.g. 1, 3, 7, windows have more than 1 line because they span multiple 5Mbp chunks)
rule f4_from_abba_baba:
    input:
        expand("ancestry_by_r/results/f4/{{POP}}/{WINDOW}.abbababa2", WINDOW = windows_1cM)
    output:
        f4 = "ancestry_by_r/results/f4/{POP}.f4"
    params:
        p = "med2",
        POP = "{POP}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 10,
        mem = 2
    shell:
        """
        (head -n 1 ancestry_by_r/results/f4/{params.POP}/W1.abbababa2 | \\
        cut -f1-6 | awk -v OFS='\\t' '{{print "window",$0,"pop1","pop2","pop3","pop4"}}'
        for i in {{1..1520}}
        do tail -n +2 ancestry_by_r/results/f4/{params.POP}/W$i.abbababa2 | \\
        cut -f1-6 | awk -v i=$i -v pop={params.POP} -v OFS='\\t' 'NR%3==1 {{print "W"i,$0,"tripsacum","parviglumis",pop,"allopatric_maize"}}'
        done) > {output.f4}
        """

## calc_and_plot_f4: calculates and plots f4 ratio for admixture proportion estimates (with bootstrap results)
rule calc_and_plot_f4:
    input:
        f4_num = "ancestry_by_r/results/f4/{POP}.f4",
        f4_denom = "ancestry_by_r/results/f4/{ALLO_MEX}.f4",
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt",
        inv = "data/refMaize/inversions/knownInv_v4_coord.txt",
        colors = "colors.R"
    output:
        png_r5 = "ancestry_by_r/plots/f4_{POP}_{ALLO_MEX}_byr5.png",
        png_r5_lzw = "../hilo_manuscript/figures_supp/f4_{POP}_{ALLO_MEX}_byr5.tif",

        png_cd5 = "ancestry_by_r/plots/f4_{POP}_{ALLO_MEX}_bycd5.png",
        png_cd5_lzw = "../hilo_manuscript/figures_supp/f4_{POP}_{ALLO_MEX}_bycd5.tif",

        png_r5_no_inv4m = "ancestry_by_r/plots/f4_{POP}_{ALLO_MEX}_byr5_noinv4m.png",
        png_cd5_no_inv4m = "ancestry_by_r/plots/f4_{POP}_{ALLO_MEX}_bycd5_noinv4m.png",
        png_f4_num_denom = "ancestry_by_r/plots/f4_{POP}_{ALLO_MEX}_num_denom.png",

        file_spearmans_rho_f4 = "ancestry_by_r/tables/spearmans_rho_f4_{POP}_{ALLO_MEX}.tex",
        file_spearmans_rho_f4_tex = "../hilo_manuscript/tables/spearmans_rho_f4_{POP}_{ALLO_MEX}.tex"
    params:
        p = "med2",
        sympatric_pop = "{POP}",
        n_boot = 10000
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 60,
        mem = 2
    script:
        "calc_and_plot_f4.R"


## combine_abba_baba_for_Dstat: combines .abbababa2 files across the genome for input to D-statistic calc
rule combine_abba_baba_for_Dstat:
    input:
        expand("ancestry_by_r/results/f4/{{POP}}/{WINDOW}.abbababa2", WINDOW = windows_1cM)
    output:
        abbababa = "ancestry_by_r/results/f4/{POP}.all.abbababa2",
        pop_names = "ancestry_by_r/results/f4/{POP}.names"
    params:
        p = "med2",
        POP = "{POP}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 10,
        mem = 2
    shell:
        """
        (cat ancestry_by_r/results/f4/{params.POP}/W1.abbababa2
        for i in {{2..1520}}
        do tail -n +2 ancestry_by_r/results/f4/{params.POP}/W$i.abbababa2
        done) > {output.abbababa}
        echo "tripsacum" > {output.pop_names}
        echo "parviglumis" >> {output.pop_names}
        echo {params.POP} >> {output.pop_names}
        echo "allopatric_maize" >> {output.pop_names}
        """

## calc_Dstat: calculates D-statistic genomewide with bootstrap confidence intervals
rule calc_Dstat:
    input:
        abbababa = "ancestry_by_r/results/f4/{POP}.all.abbababa2",
        pops_name = "ancestry_by_r/results/f4/{POP}.names",
        pops_size = "ancestry_by_r/results/f4/{POP}.size"
    output:
        "ancestry_by_r/results/f4/{POP}.Dstats.Observed.txt"
    params:
        p = "med2",
        prefix_out = "ancestry_by_r/results/f4/{POP}.Dstats",
        prefix_in = "ancestry_by_r/results/f4/{POP}.all"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 10,
        mem = 2
    shell:
        "Rscript ../software/angsd_0.932/R/estAvgError.R angsdFile={params.prefix_in} out={params.prefix_out} sizeFile={input.pops_size} nameFile={input.pops_name}"


## plot_bootstrap_NGSadmix_by_r: plots bootstrap results for global ancestry (NGSAdmix) by recombination rate
rule plot_bootstrap_NGSadmix_by_r:
    input:
        colors = "colors.R",
        meta = "samples/HILO_MAIZE55_meta.RData",
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt",
        inv = "data/refMaize/inversions/knownInv_v4_coord.txt",
        r5 = "ancestry_by_r/results/bootstrap_1cM/" + prefix_all + "/r5_K2.Rdata",
        cd5 = "ancestry_by_r/results/bootstrap_1cM/" + prefix_all + "/cd5_K2.Rdata"
    output:
        png_multi = "ancestry_by_r/plots/K2_by_r_multi_panel.png",
        png_multi_lzw = "../hilo_manuscript/figures_main/K2_by_r_multi_panel.tif",

        png_r5_symp = "ancestry_by_r/plots/K2_by_r_bootstrap_sympatric_only.png",
        png_r5_symp_allo = "ancestry_by_r/plots/K2_by_r_bootstrap_sympatric_and_allopatric.png",
        png_cd5_symp = "ancestry_by_r/plots/K2_by_cd_bootstrap_sympatric_only.png",

        png_cd5_symp_allo = "ancestry_by_r/plots/K2_by_cd_bootstrap_sympatric_and_allopatric.png",
        png_cd5_symp_allo_lzw = "../hilo_manuscript/figures_supp/K2_by_cd_bootstrap_sympatric_and_allopatric.tif",

        png_cor_r_cd = "ancestry_by_r/plots/corr_r_cd_1cM.png",
        png_cor_r_frac = "ancestry_by_r/plots/corr_r_frac_1cM.png",
        png_facet_r5 = "ancestry_by_r/plots/K2_by_r_bootstrap_lm_elevation_facet_r.png",

        png_color_elev_r5 = "ancestry_by_r/plots/K2_by_r_bootstrap_lm_elevation_color_elev.png",
        png_color_elev_r5_lzw = "../hilo_manuscript/figures_supp/K2_by_r_bootstrap_lm_elevation_color_elev.tif",

        file_elev_r_interaction = "ancestry_by_r/tables/elev_r_interaction.tex",

        file_elev_r_interaction_5 = "ancestry_by_r/tables/elev_r_interaction_5.tex",
        file_elev_r_interaction_5_tex = "../hilo_manuscript/tables/elev_r_interaction_5.tex",

        file_spearmans_rho_ngsadmix = "ancestry_by_r/tables/spearmans_rho_ngsadmix.tex",
        file_spearmans_rho_ngsadmix_tex = "../hilo_manuscript/tables/spearmans_rho_ngsadmix.tex"
    params:
        p = "med2"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 4
    script:
         "plot_bootstrap_NGSadmix.R"

## plot_bootstrap_local_ancestry_by_r: plots bootstrap results for local ancestry by recombination rate
rule plot_bootstrap_local_ancestry_by_r:
    input:
        colors = "colors.R",
        meta = "samples/HILO_MAIZE55_meta.RData",
        windows = "ancestry_by_r/results/map_pos_1cM_windows.txt",
        inv = "data/refMaize/inversions/knownInv_v4_coord.txt",
        local_anc = ["ancestry_by_r/results/local_anc_1cM/" + prefix_all + "/Ne10000_yesBoot/" + POP + ".anc.wind" for POP in symp_pops]
    output:
        png_r5_local_anc = "ancestry_by_r/plots/local_anc_by_r_quintiles.png",
        png_cd5_local_anc = "ancestry_by_r/plots/local_anc_by_cd_quintiles.png",

        png_r_cont_local_anc = "ancestry_by_r/plots/local_anc_by_r_continuous.png",
        png_r_cont_local_anc_lzw = "../hilo_manuscript/figures_supp/local_anc_by_r_continuous.tif",

        file_spearmans_rho_local_anc = "ancestry_by_r/tables/spearmans_rho_local_ancestry.tex",
        file_spearmans_rho_local_anc_tex = "../hilo_manuscript/tables/spearmans_rho_local_ancestry.tex"
    params:
        p = "med2",
        dir_anc = "ancestry_by_r/results/local_anc_1cM/" + prefix_all + "/Ne10000_yesBoot",
        n_boot = 10000
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 60,
         mem = 4
    script:
         "plot_bootstrap_local_ancestry.R"
