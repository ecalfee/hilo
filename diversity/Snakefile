## diversity/Snakefile: pipeline to get pi and Fst estimates

# note: working directory is hilo/ and all file inputs/outputs below are relative to that working directory

## make_fasta: makes ancestral fasta from tripsacum using concensus (most frequent) base
rule make_fasta:
    input:
        bam = "filtered_bams/results/SRR7758238/TRIP.sort.dedup.baq.bam",
        bai = "filtered_bams/results/SRR7758238/TRIP.sort.dedup.baq.bam.bai"
    output:
        fasta = trip_anc
    params:
        p = "med2",
        out_prefix = "filtered_bams/results/SRR7758238/TRIP"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 4*60,
        mem = lambda wildcards, attempt: attempt * 8 + 16
    shell:
        "angsd -out {params.out_prefix} "
        "-i {input.bam} "
        "-doFasta 2 "
        "-remove_bads 1 -minMapQ 30 -minQ 20 "
        "-doCounts 1 "

## list_not_pops: makes lists of all homozygous ancestry bams in sympatric maize or mexicana EXCEPT one focal population (only included samples at 0.05x threshold ("samples/ALL_byPop"))
rule list_not_pops:
    input:
        symp_pops = expand("local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/{{ZEA}}/bams/{POP}_bams.list", POP = symp_pops)
    output:
        file = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/bams/{NOTPOP}_bams.list"
    params:
        p = "med2",
        file_prefix = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/bams/",
        POP = lambda wildcards: "pop" + wildcards.NOTPOP[3:] # extract just the population number and add prefix 'pop'
    resources:
        time_min = 5,
        mem = 2
    run:
        print("Get all individuals EXCEPT population: " + params.POP)
        if params.POP in symp_maize_pops:
            print("a maize population!")
            all_pops = symp_maize_pops
        elif params.POP in symp_mexicana_pops:
            print("a mexicana population!")
            all_pops = symp_mexicana_pops
        else:
            raise NameError('oops! not a recognized sympatric population')
        with open(output.file, 'w') as outfile:
            for p in all_pops:
                if p != params.POP:
                    with open(params.file_prefix + p + "_bams.list") as infile:
                        for line in infile:
                            outfile.write(line)

## estimate_saf_pop: estimate site allele frequency likelihoods using ANGSD for a population
rule estimate_saf_pop:
    input:
        anc = "filtered_bams/results/SRR7758238/TRIP.fa.gz",
        bam_list = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/bams/{POP1}_bams.list",
        complete = expand("local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/{{ZEA}}/bams/{POP}.completed", POP = symp_pops) # all pops have completed bams
    output:
        saf_idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.saf.idx", # ALL or HOMOZYG/maize. maybe start with HOMOZYG/mexicana
        saf_gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.saf.gz",
        saf_pos = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.saf.pos.gz"
    params:
        p = "med2",
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}"
    conda:
        "../envs/environment.yaml"
    threads:
        4
    resources:
        time_min = 48*60,
        mem = lambda wildcards, attempt: attempt * 16 + 40
    shell:
        "angsd -out {params.out_prefix} "
        "-doSaf 1 -anc {input.anc} "
        "-GL 1 "
        "-P {threads} "
        "-bam {input.bam_list} "
        "-remove_bads 1 -minMapQ 30 -minQ 20 "

## estimate_sfs: estimates site frequency spectrum (sfs) by maximum likelihood in ANGSD
rule estimate_sfs:
    input:
        saf = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.saf.idx"
    output:
        sfs = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.sfs"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    threads:
        6
    resources:
        time_min = 48*60,
        mem = lambda wildcards, attempt: attempt * 8 + 32 # NEEDS LOTS OF MEM!! If unreasonable to load whole saf.gz into memory will need to set -nSites
    shell:
        "realSFS {input.saf} -P {threads} > {output.sfs}"

## calc_thetas: calculates thetas for each site from saf and sfs in ANGSD
rule calc_thetas:
    input:
        saf = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.saf.idx",
        sfs = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.sfs"
    output:
        gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.thetas.gz",
        idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.thetas.idx"
    params:
        p = "med2",
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 12*60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        "realSFS saf2theta {input.saf} -sfs {input.sfs} -outname {params.out_prefix}"

## calc_pi_by_windows: calculates pi for windows of set size
rule calc_pi_by_windows:
    input:
        idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.thetas.idx",
        gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.thetas.gz"
    output:
        thetas = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.pi.windows.{WIN}.{STEP}.pestPG"
    params:
        p = "low2",
        WIN = lambda wildcards: wildcards.WIN,
        STEP = lambda wildcards: wildcards.STEP,
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.pi.windows.{WIN}.{STEP}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 4
    shell:
        "thetaStat do_stat {input.idx} -win {params.WIN} -step {params.STEP} -outnames {params.out_prefix}"

## calc_pi_all_chr: calculates pi for each chromosome in the genome (for background diversity rates)
rule calc_pi_all_chr:
    input:
        idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.thetas.idx",
        gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.thetas.gz"
    output:
        thetas = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.pi.allChr.pestPG"
    params:
        p = "low2",
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.pi.allChr"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 4
    shell:
        "thetaStat do_stat {input.idx} -outnames {params.out_prefix}"

## calc_mean_pi_in_outliers_vs_not: script to summarise diversity (pi) for homozygous ancestry windows within high introgression outliers vs outside
rule calc_mean_pi_in_outliers_vs_not:
    input:
        genome = "data/refMaize/Zea_mays.AFPv4.dna.chr.autosome.lengths",
        bed_sites = "local_ancestry/results/thinnedSNPs/" + prefix_all + "/whole_genome.bed",
        meta = "samples/" + prefix_all + "_meta.RData",
        pi_windows = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.pi.windows.{WIN}.{STEP}.pestPG",
        pop_freq = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{POP}.anc.freq"
    output:
        txt = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP}.pi.outliers_vs_not.{WIN}.{STEP}.txt"
    params:
        p = "low2",
        pop = lambda wildcards: wildcards.POP,
        zea = lambda wildcards: wildcards.ZEA
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 4
    script:
        "calc_mean_pi_in_outliers_vs_not.R"

## plot_mean_pi_in_outliers_vs_not: script to plot diversity (pi) by population and ancestry for homozygous ancestry windows within high introgression outliers vs outside
rule plot_mean_pi_in_outliers_vs_not:
    input:
        meta = "samples/" + prefix_all + "_meta.RData",
        colors = "colors.R",
        txt = expand("diversity/results/pi/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/{ZEA}/{POP}.pi.outliers_vs_not.{{WIN}}.{{STEP}}.txt", ZEA = zea, POP = symp_pops)
    output:
        png_out = "diversity/plots/Ne{Ne}_{YESNO}Boot/pi.outliers_vs_not.{WIN}.{STEP}.png"
    params:
        p = "low2",
        pop = lambda wildcards: wildcards.POP,
        Ne = lambda wildcards: wildcards.Ne,
        yesno = lambda wildcards: wildcards.YESNO,
        win = lambda wildcards: wildcards.WIN,
        step = lambda wildcards: wildcards.STEP,
        prefix_all = prefix_all
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 4
    script:
        "plot_mean_pi_in_outliers_vs_not.R"


## estimate_2D_sfs: estimates 2D site frequency spectrum (sfs) for 2 populations jointly by maximum likelihood in ANGSD
rule estimate_2D_sfs:
    input:
        saf1 = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.saf.idx",
        saf2 = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP2}.saf.idx"
    output:
        sfs = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.2Dsfs"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    threads:
        6
    resources:
        time_min = 24*60,
        mem = lambda wildcards, attempt: attempt * 16 + 40 # NEEDS LOTS OF MEM!! If unreasonable to load whole saf.gz into memory will need to set -nSites
    shell:
        "realSFS {input.saf1} {input.saf2} -P {threads} > {output.sfs}"

## calc_fst_idx: calculates fst for each sites using 2Dsfs and saf's for each population (can later be summarised by window or genomewide)
rule calc_fst_idx:
    input:
        saf1 = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.saf.idx",
        saf2 = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP2}.saf.idx",
        sfs = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.2Dsfs"
    output:
        gz = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.gz",
        idx = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.idx"
    params:
        p = "med2",
        out_prefix = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 12*60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        "realSFS fst index {input.saf1} {input.saf2} -sfs {input.sfs} -fstout {params.out_prefix} -whichFst 1"

## calc_fst_by_windows: calculates fst for windows of set size
rule calc_fst_by_windows:
    input:
        idx = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.idx",
        gz = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.gz"
    output:
        fst = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.windows.{WIN}.{STEP}.txt"
    params:
        p = "med2",
        WIN = lambda wildcards: wildcards.WIN,
        STEP = lambda wildcards: wildcards.STEP
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 60,
        mem = lambda wildcards, attempt: attempt * 4
    shell:
        "realSFS fst stats2 {input.idx} -win {params.WIN} -step {params.STEP} > {output.fst}"

## calc_fst_all_chr: calculates fst for each chromosome in the genome (for background divergence rates between population pair)
rule calc_fst_all_chr:
    input:
        idx = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.idx",
        gz = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.gz"
    output:
        fst = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.fst.allChr.txt"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 60,
        mem = lambda wildcards, attempt: attempt * 4
    shell:
        "realSFS fst stats {input.idx} > {output.fst}"

## print_fst_one_file: combines all population pairs genomewide fst results into 1 file
rule print_fst_one_file:
    input:
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP1}.{POP2}.fst.allChr.txt", POP1 = symp_maize_pops, POP2 = symp_mexicana_pops), # fst between subspecies
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/maize/{POP1}.{POP2}.fst.allChr.txt", POP1 = symp_mexicana_pops, POP2 = symp_maize_pops),
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP_PAIR}.fst.allChr.txt", POP_PAIR = symp_maize_pairs), # within subspecies, fst for introgressed ancestry
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/maize/{POP_PAIR}.fst.allChr.txt", POP_PAIR = symp_mexicana_pairs),
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP_PAIR}.fst.allChr.txt", POP_PAIR = symp_mexicana_pairs), # within subspecies, fst for native ancestry
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/maize/{POP_PAIR}.fst.allChr.txt", POP_PAIR = symp_maize_pairs)
    output:
        fst = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/summary_pop_pairs_fst.allChr.txt"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 2
    shell:
        "(for i in {input}; do awk -v i=$i '{{print i,$2}}' $i; done) > {output.fst}"

## plot_within_ancestry_fst: plot fst within ancestry across population pairs
rule plot_within_ancestry_fst:
    input:
        fst = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/summary_pop_pairs_fst.allChr.txt",
        meta = "samples/" + prefix_all + "_meta.RData"
    output:
        png_points_maize = "diversity/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/fst_within_maize_ancestry_genomewide_points.png",
        png_points_mexicana = "diversity/plots/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/fst_within_mexicana_ancestry_genomewide_points.png",
        png_heatmap_maize = "diversity/plots/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/fst_within_maize_ancestry_genomewide_heatmap.png",
        png_heatmap_mexicana = "diversity/plots/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/fst_within_mexicana_ancestry_genomewide_heatmap.png",
        png_heatmap_both = "diversity/plots/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/fst_within_maize_or_mexicana_ancestry_genomewide_heatmap_both.png"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 4
    script:
        "plot_within_ancestry_fst.R"

## estimate_saf_pop_outliers: estimate site allele frequency likelihoods using ANGSD for population POP1 using outlier regions only (outliers defined by possibly different POP2)
rule estimate_saf_pop_outliers:
    input:
        anc = "filtered_bams/results/SRR7758238/TRIP.fa.gz",
        bam_list = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/bams/{POP1}_bams.list",
        complete = expand("local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/{{ZEA}}/bams/{POP}.completed", POP = symp_pops), # all pops have completed bams
        regions_file = "ZAnc/results/" + prefix_all + "/Ne10000_yesBoot/{POP2}.{n}pop.outliers.regions"
    output:
        saf_idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.saf.idx", # ALL or HOMOZYG/maize. maybe start with HOMOZYG/mexicana
        saf_gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.saf.gz",
        saf_pos = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.saf.pos.gz"
    params:
        p = "med2",
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}"
    conda:
        "../envs/environment.yaml"
    threads:
        4
    resources:
        time_min = 48*60,
        mem = lambda wildcards, attempt: attempt * 16 + 40
    shell:
        "angsd -out {params.out_prefix} "
        "-doSaf 1 -anc {input.anc} "
        "-rf {input.regions_file} "
        "-GL 1 "
        "-P {threads} "
        "-bam {input.bam_list} "
        "-remove_bads 1 -minMapQ 30 -minQ 20 "



## calc_thetas_outliers: calculates thetas for each site from saf and sfs in ANGSD for outlier regions only
## note: uses global sfs from all regions across the genome as a prior for this subset of regions.
rule calc_thetas_outliers:
    input:
        saf = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.saf.idx",
        sfs = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.sfs"
    output:
        gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.thetas.gz",
        idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.thetas.idx"
    params:
        p = "med2",
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 12*60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        "realSFS saf2theta {input.saf} -sfs {input.sfs} -outname {params.out_prefix}"

## calc_pi_all_outliers: calculates pi across all outlier regions only
rule calc_pi_all_outliers:
    input:
        idx = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.thetas.idx",
        gz = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.thetas.gz"
    output:
        thetas = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.pi.allChr.pestPG"
    params:
        p = "low2",
        out_prefix = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP2}.pi.allChr"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 4
    shell:
        "thetaStat do_stat {input.idx} -outnames {params.out_prefix}"


## calc_fst_idx_outliers: calculates fst for each sites using 2Dsfs and saf's for each population for outlier regions only
## note: outliers are always defined based on the first population and 2Dsfs prior is an estimate from all sites in the genome (not just outliers)
rule calc_fst_idx_outliers:
    input:
        saf1 = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{n}pop.outliers{POP1}.saf.idx",
        saf2 = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP2}.{n}pop.outliers{POP1}.saf.idx",
        sfs = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.2Dsfs"
    output:
        gz = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.{n}pop.outliers{POP1}.fst.gz",
        idx = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.{n}pop.outliers{POP1}.fst.idx"
    params:
        p = "med2",
        out_prefix = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.{n}pop.outliers{POP1}"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 12*60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        "realSFS fst index {input.saf1} {input.saf2} -sfs {input.sfs} -fstout {params.out_prefix} -whichFst 1"

## calc_fst_all_outliers: calculates fst for each chromosome in the genome across outlier regions only
rule calc_fst_all_outliers:
    input:
        idx = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.{n}pop.outliers{POP1}.fst.idx",
        gz = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.{n}pop.outliers{POP1}.fst.gz"
    output:
        fst = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/{ZEA}/{POP1}.{POP2}.{n}pop.outliers{POP1}.fst.allChr.txt"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 60,
        mem = lambda wildcards, attempt: attempt * 4
    shell:
        "realSFS fst stats {input.idx} > {output.fst}"

## print_fst_mexicana_peaks_one_file:: combines all fst results for high mexicana introgression peaks into 1 file
rule print_fst_mexicana_peaks_one_file:
    input:
        # fst between mexicana ancestry within sympatric mexicana and within local sympatric maize (at the introgression outliers for the local maize)
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP1}.{POP2}.1pop.outliers{POP1}.fst.allChr.txt", zip, POP1 = symp_maize_pops, POP2 = symp_mexicana_pops),
        expand("diversity/results/fst/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP1}.{POP2}.4pop.outliers{POP1}.fst.allChr.txt", zip, POP1 = symp_maize_pops, POP2 = symp_mexicana_pops)
    output:
        fst = "diversity/results/fst/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/summary_pop_pairs_fst.mexicana_ancestry.peaks.allChr.txt"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 2
    shell:
        "(for i in {input}; do awk -v i=$i '{{print i,$2}}' $i; done) > {output.fst}"

## print_pi_one_file: combines all within-ancestry pi results into 1 file (chr, Watterson's theta, nSites with data)
rule print_pi_one_file:
    input:
        expand("diversity/results/pi/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/{ZEA}/{POP}.pi.allChr.pestPG", POP = symp_pops, ZEA = zea)
    output:
        pi = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/summary_pop_pi.allChr.txt"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 2
    shell:
        "(for i in {input}; do awk -v i=$i '{{print i,$2,$4,$14}}' $i; done) > {output.pi}"


## print_pi_mexicana_peaks_one_file: combines all pi results for high mexicana ancestry peaks into 1 file (chr, Watterson's theta, nSites with data)
rule print_pi_mexicana_peaks_one_file:
    input:
        # introgressed mexicana tracts within sympatric maize
        expand("diversity/results/pi/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP}.{n}pop.outliers{POP}.pi.allChr.pestPG", POP = symp_maize_pops, n = [1, 4]),
        # mexicana ancestry within mexicana (outliers defined by local maize)
        expand("diversity/results/pi/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP2}.1pop.outliers{POP1}.pi.allChr.pestPG", zip, POP1 = symp_maize_pops, POP2 = symp_mexicana_pops),
        expand("diversity/results/pi/" + prefix_all + "/Ne{{Ne}}_{{YESNO}}Boot/HOMOZYG/mexicana/{POP2}.4pop.outliers{POP1}.pi.allChr.pestPG", zip, POP1 = symp_maize_pops, POP2 = symp_mexicana_pops)
    output:
        pi = "diversity/results/pi/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/HOMOZYG/summary_pop_pi.mexicana_ancestry.peaks.allChr.txt"
    params:
        p = "med2"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = lambda wildcards, attempt: attempt * 2
    shell:
        "(for i in {input}; do awk -v i=$i '{{print i,$2,$4,$14}}' $i; done) > {output.pi}"
