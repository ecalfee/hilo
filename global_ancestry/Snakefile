## variant_sites/Snakefile: pipeline to call SNPs

workdir: path_hilo
# note: working directory is hilo/ and all file inputs/outputs below are relative to that working directory

## thin_GL_4PCA: thins sites in beagle genotype likelihood files for all regions to every 100th SNP
## and returns one concatenated GL file for input to PCAngsd and NGSadmix
rule thin_GL_4PCA:
    input: # input all GL files, corresponding rpos files, and the master list of all regions
        gl = expand("variant_sites/results/{{PREFIX}}/{REGION}.beagle.gz",
        REGION=list(regions_dict.keys()))
    output: # thinned GL file for whole genome
        gl = "global_ancestry/results/thinnedSNPs/{PREFIX}/whole_genome.beagle.gz"
    params:
        p = "med2",
        N = 100, # keep every 100th SNP
        first = 0, # first region
        last = len(regions_dict) - 1, # last region
        prefix = lambda wildcards: wildcards.PREFIX
    resources:
        time_min = lambda wildcards, attempt: attempt * 6 * 60,
        mem = lambda wildcards, attempt: attempt * 4
    conda:
        "../envs/environment.yaml"
    shell:
        "./global_ancestry/thin_GL_4PCA.sh {params.N} {params.first} {params.last} {params.prefix}"

## run_PCAngsd: calculate covariance matrix from genotype likelihood file using PCAngsd
rule run_PCAngsd:
    input:
        gl = "global_ancestry/results/thinnedSNPs/{PREFIX}/whole_genome.beagle.gz"
    output:
        cov = "global_ancestry/results/PCA/{PREFIX}/whole_genome.cov"
    params:
        p = "med2",
        prefix_out = lambda wildcards, output: os.path.splitext(output.cov)[0] # output file without .cov extension
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        4
    resources:
        time_min = lambda wildcards, attempt: attempt * 6 * 60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        """
        pcangsd \
        -beagle {input.gl} \
        -threads {threads} -iter 100 \
        -minMaf 0 -admix \
        -o {params.prefix_out}
        """


## run_NGSAdmix: estimates admixture proportions from genotype likelihood file using NGSAdmix
rule run_NGSAdmix:
    input:
        gl = "global_ancestry/results/thinnedSNPs/{PREFIX}/whole_genome.beagle.gz"
    output:
        admix = "global_ancestry/results/NGSAdmix/{PREFIX}/K{K}.qopt"
    params:
        p = "med2",
        k = lambda wildcards: wildcards.K,
        prefix_out = lambda wildcards, output: os.path.splitext(output.admix)[0] # output file without .cov extension
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    threads:
        2
    resources:
        time_min = lambda wildcards, attempt: attempt * 6 * 60,
        mem = lambda wildcards, attempt: attempt * 8
    shell:
        """
        NGSadmix -likes {input.gl} \
        -K {params.k} -P {threads} \
        -o {params.prefix_out}
        """

## results_NGSAdmix: extracts results of NGSAdmix from output files, summarise by pop and individual
rule results_NGSAdmix:
    input:
        admix = "global_ancestry/results/NGSAdmix/{PREFIX}/K{K}.qopt",
        meta = "samples/{PREFIX}_meta.RData"
    output:
        alphas = "global_ancestry/results/NGSAdmix/{PREFIX}/K{K}_alphas_by_symp_pop.txt",
        ind = "global_ancestry/results/NGSAdmix/{PREFIX}/K{K}_alphas_by_ind.RData"
    params:
        p = "med2",
        k = lambda wildcards: wildcards.K
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "results_NGSAdmix.R"

## plot_NGSAdmix: plots results of NGSAdmix and produces table with linear model output for cline in mexicana ancestry with elevation
rule plot_NGSAdmix:
    input:
        meta = "samples/" + prefix_all + "_meta.RData",
        colors = "colors.R",
        k2 = "global_ancestry/results/NGSAdmix/" + prefix_all + "/K2_alphas_by_ind.RData"
    output:
        png_elev = "global_ancestry/plots/lm_mexicana_by_pop_elevation_K2.png",
        png_structure = "global_ancestry/plots/structure_K2.png",
        lm_tex = "global_ancestry/tables/lm_elevation.tex",
        png_global_anc_multi = "global_ancestry/plots/global_anc_multi.png"
    params:
        p = "med2"
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "plot_NGSAdmix.R"

## plot_PCAngsd: plots genomewide PCA from genetic covariance matrix estimated by PCAngsd
rule plot_PCAngsd:
    input:
        meta = "samples/{PREFIX}_meta.RData",
        colors = "colors.R",
        cov = "global_ancestry/results/PCA/{PREFIX}/whole_genome.cov"
    output:
        png_pca = "global_ancestry/plots/{PREFIX}_pca.png",
        png_pc34 = "global_ancestry/plots/{PREFIX}_pc34.png",
        png_pc56 = "global_ancestry/plots/{PREFIX}_pc56.png"
        # add PCA that includes parviglumis?
    params:
        p = "med2"
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "plot_PCAngsd.R"

## add_parv_2_meta: makes a new metadata file that includes PARV50 parviglumis metadata
rule add_parv_2_meta:
    input:
        ids = "samples/HILO_MAIZE55_PARV50_ids.list",
        meta = "samples/HILO_MAIZE55_meta.RData"
    output:
        txt = "samples/HILO_MAIZE55_PARV50_meta.txt",
        rdata = "samples/HILO_MAIZE55_PARV50_meta.RData"
    params:
        p = "med2"
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "add_parv_2_meta.R"

## plot_NGSAdmix_parv: plots results of NGSAdmix including parviglumis samples
rule plot_NGSAdmix_parv:
    input:
        meta = "samples/HILO_MAIZE55_PARV50_meta.RData",
        colors = "colors.R",
        k3 = "global_ancestry/results/NGSAdmix/HILO_MAIZE55_PARV50/K3_alphas_by_ind.RData"
    output:
        png_structure = "global_ancestry/plots/HILO_MAIZE55_PARV50_structure_K3.png"
    params:
        p = "med2"
    shadow:
         "minimal"
    conda:
         "../envs/environment.yaml"
    resources:
         time_min = 15,
         mem = 2
    script:
         "plot_NGSAdmix_parv.R"
