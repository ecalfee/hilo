## domestication_scan/Snakefile: pipeline to test for enrichment of overlap between domestication
# scan outlier regions and 'introgression deserts'

workdir: path_hilo
# note: working directory is hilo/ and all file inputs/outputs below are relative to that working directory

## id_raisd_hits: creates bed file of top X% raisd hits (as contiguous regions) from raw raisd output
rule id_raisd_hits:
    input:
        raisd = "domestication_scan/results/RAiSD_Output.Raisd"
    output:
        bed = "domestication_scan/results/raisdHits.bed"
    params:
        p = "med2",
        top_x = .001
    resources:
        time_min = 15,
        mem = 8
    conda:
        "../envs/environment.yaml"
    script:
        "id_raisd_hits.R"

## get_fasta_hits: gets fasta reference genome sequence for raisd hits
rule get_fasta_hits:
    input:
        ref = ref,
        bed = "domestication_scan/results/raisdHits.bed"
    output:
        fa = "domestication_scan/results/raisdHits.fa"
    params:
        p = "med2",
        top_x = .002
    resources:
        time_min = 15,
        mem = 8
    conda:
        "../envs/environment.yaml"
    shell:
        "bedtools getfasta -fi {input.ref} -fo {output.fa} -bed {input.bed}"

## filter_raisd_hits: script filters raisd hits for too many Ns (missing data in reference genome)
rule filter_raisd_hits:
    input:
        bed = "domestication_scan/results/raisdHits.bed",
        fa = "domestication_scan/results/raisdHits.fa"
    output:
        bed_keep = "domestication_scan/results/raisdHits_keep.bed",
        bed_excl = "domestication_scan/results/raisdHits_exclude.bed"
    params:
        p = "med2",
        maxN = .5
    resources:
        time_min = 15,
        mem = 8
    conda:
        "../envs/environment.yaml"
    script:
        "filter_raisd_hits.R"

## calc_overlap_hits: find overlap (in bp) for raisd hits & outliers for original raisd hits positions and 100 randomly shuffled positions
rule calc_overlap_hits:
    input:
        hits = "domestication_scan/results/raisdHits_keep.bed",
        excl = "domestication_scan/results/raisdHits_exclude.bed",
        outliers = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.merged.bed",
        genome = ref_chr
        # introgression desert files:
        #maize_deserts = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/maize_neg_meanAnc_outliers.perc05.bed",
        #mexicana_deserts = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/mexicana_pos_meanAnc_outliers.perc05.bed",
    output:
        bed = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/raisdOverlap.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.bed",
        shuffle = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/raisdOverlap.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.counts"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    shell:
        """
        bedtools intersect -a {input.hits} -b {input.outliers} -wo > {output.bed}
        awk '{{count += 1; sum += $7;}} END{{print count,sum;}}' {output.bed} > {output.shuffle}
        for i in {{1..1000}}
            do bedtools shuffle -i {input.hits} -g {input.genome} -excl {input.excl} | \\
            bedtools intersect -a - -b {input.outliers} -wo | \\
            awk '{{count += 1; sum += $7;}} END{{print count,sum;}}' >> {output.shuffle}
        done
        """

## plot_overlap_hits: plots overlap between raisd hits and introgression deserts in shuffled data and original data
rule plot_overlap_hits:
    input:
        overlap = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/raisdOverlap.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.counts",
        hits = "domestication_scan/results/raisdHits_keep.bed",
        genome = ref_chr
    output:
        png = "domestication_scan/plots/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/raisdOverlap.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.png",
        summary = "domestication_scan/plots/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/raisdOverlap.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.summary"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "plot_overlap_hits.R"


## make_bed_domestication_genes_from_lit.R: makes bed file for all domestication genes in the list from the literature
rule make_bed_domestication_genes_from_lit:
    input:
        genes_list = "data/key_genes.csv"
    output:
        bed = "domestication_scan/results/domestication_genes_from_lit.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "make_bed_domestication_genes_from_lit.R"


## add_20kb_domestication_genes: adds 20kb upstream and downstream to all domestication genes
rule add_20kb_domestication_genes:
    input:
        bed = "domestication_scan/results/domestication_genes_from_lit.bed",
        genome = ref_chr
    output:
        bed = "domestication_scan/results/domestication_genes_from_lit.plus20kb.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    shell: # also gets rid of header
        "tail -n +2 {input.bed} | bedtools slop -i - -g {input.genome} -b 20000 > {output.bed}"

## calc_overlap_domestication_genes: find overlap gene set & outliers. Also count number of outliers in original gene set (line 1) and 100 randomly shuffled positions from that gene set (lines 2-101)
rule calc_overlap_domestication_genes:
    input:
        genes = "domestication_scan/results/domestication_genes_from_lit.plus20kb.bed",
        outliers = "ZAnc/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.merged.bed",
        genome = ref_chr
    output:
        bed = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.bed",
        shuffle = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.{ZEA}_{POSNEG}_{STAT}_outliers.{SIG}.counts"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    shell:
        """
        bedtools intersect -a {input.genes} -b {input.outliers} -u > {output.bed}
        wc -l {output.bed} > {output.shuffle}
        for i in {{1..1000}}
            do bedtools shuffle -i {input.genes} -g {input.genome} | \\
            bedtools intersect -a - -b {input.outliers} -u | wc -l >> {output.shuffle}
        done
        """

## summarise_overlap_domestication_genes: summarises number of outliers in original gene set (line 1) and 1000 randomly shuffled positions from that gene set (lines 2-1001)
rule summarise_overlap_domestication_genes:
    input:
        maize = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.maize_neg_meanAnc_outliers.perc05.counts",
        mexicana = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.mexicana_pos_meanAnc_outliers.perc05.counts"
    output:
        txt = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.overlap.summary_overlap_outliers.txt"
    params:
        p = "med2",
        Ne = lambda wildcards: wildcards.Ne,
        yesno = lambda wildcards: wildcards.YESNO,
        prefix = prefix_all
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "summarise_overlap_domestication_genes.R"

## get_ancestry_domestication_genes: find min and max ancestry that overlaps domestication genes
rule get_ancestry_domestication_genes:
    input:
        genes = "domestication_scan/results/domestication_genes_from_lit.plus20kb.bed",
        anc = "local_ancestry/results/ancestry_hmm/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/anc/{ZEA}.combined.anc.bed",
        genome = ref_chr
    output:
        bed_max = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.{ZEA}.max_mexicana_ancestry.bed",
        bed_min = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.{ZEA}.min_mexicana_ancestry.bed"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    shell:
        """
        bedtools map -g {input.genome} -a {input.genes} -b {input.anc} -c 5 -o max > {output.bed_max}
        bedtools map -g {input.genome} -a {input.genes} -b {input.anc} -c 5 -o min > {output.bed_min}
        """

## make_table_domestication_genes: make table with minimum introgression domestication genes
rule make_table_domestication_genes:
    input:
        maize_bed = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.maize.min_mexicana_ancestry.bed",
        maize_overlap = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.maize_neg_meanAnc_outliers.perc05.bed",
        mexicana_bed = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.mexicana.max_mexicana_ancestry.bed",
        mexicana_overlap = "domestication_scan/results/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes_from_lit.plus20kb.mexicana_pos_meanAnc_outliers.perc05.bed"
    output:
        tbl = "domestication_scan/tables/" + prefix_all + "/Ne{Ne}_{YESNO}Boot/domestication_genes.tex"
    params:
        p = "med2"
    shadow:
        "minimal"
    conda:
        "../envs/environment.yaml"
    resources:
        time_min = 15,
        mem = 2
    script:
        "make_table_domestication_genes.R"
